/**
 * generated by Xtext 2.25.0
 */
package it.univaq.disim.housebuilder.xtext.formatting2;

import com.google.inject.Inject;
import housebuilderV2.Controller;
import housebuilderV2.Entrance;
import housebuilderV2.Floor;
import housebuilderV2.House;
import housebuilderV2.Passage;
import housebuilderV2.Space;
import it.univaq.disim.housebuilder.xtext.services.HouseBuilderV2GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class HouseBuilderV2Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private HouseBuilderV2GrammarAccess _houseBuilderV2GrammarAccess;
  
  protected void _format(final House house, @Extension final IFormattableDocument document) {
    EList<Floor> _floors = house.getFloors();
    for (final Floor floor : _floors) {
      document.<Floor>format(floor);
    }
    EList<Passage> _passages = house.getPassages();
    for (final Passage passage : _passages) {
      document.<Passage>format(passage);
    }
    EList<Controller> _controllers = house.getControllers();
    for (final Controller controller : _controllers) {
      document.<Controller>format(controller);
    }
    EList<Entrance> _entrances = house.getEntrances();
    for (final Entrance entrance : _entrances) {
      document.<Entrance>format(entrance);
    }
  }
  
  protected void _format(final Floor floor, @Extension final IFormattableDocument document) {
    EList<Space> _spaces = floor.getSpaces();
    for (final Space space : _spaces) {
      document.<Space>format(space);
    }
  }
  
  public void format(final Object floor, final IFormattableDocument document) {
    if (floor instanceof XtextResource) {
      _format((XtextResource)floor, document);
      return;
    } else if (floor instanceof Floor) {
      _format((Floor)floor, document);
      return;
    } else if (floor instanceof House) {
      _format((House)floor, document);
      return;
    } else if (floor instanceof EObject) {
      _format((EObject)floor, document);
      return;
    } else if (floor == null) {
      _format((Void)null, document);
      return;
    } else if (floor != null) {
      _format(floor, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(floor, document).toString());
    }
  }
}

/*
 * generated by Xtext 2.25.0
 */
package it.univaq.disim.housebuilder.xtext.serializer;

import com.google.inject.Inject;
import housebuilderV2.Actuator;
import housebuilderV2.Controller;
import housebuilderV2.Device;
import housebuilderV2.Entrance;
import housebuilderV2.ExternalSpace;
import housebuilderV2.Floor;
import housebuilderV2.House;
import housebuilderV2.HousebuilderV2Package;
import housebuilderV2.Passage;
import housebuilderV2.Room;
import housebuilderV2.Sensor;
import housebuilderV2.Window;
import it.univaq.disim.housebuilder.xtext.services.HouseBuilderV2GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HouseBuilderV2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HouseBuilderV2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HousebuilderV2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HousebuilderV2Package.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case HousebuilderV2Package.CONTROLLER:
				sequence_Controller(context, (Controller) semanticObject); 
				return; 
			case HousebuilderV2Package.DEVICE:
				sequence_Device(context, (Device) semanticObject); 
				return; 
			case HousebuilderV2Package.ENTRANCE:
				sequence_Entrance(context, (Entrance) semanticObject); 
				return; 
			case HousebuilderV2Package.EXTERNAL_SPACE:
				sequence_ExternalSpace(context, (ExternalSpace) semanticObject); 
				return; 
			case HousebuilderV2Package.FLOOR:
				sequence_Floor(context, (Floor) semanticObject); 
				return; 
			case HousebuilderV2Package.HOUSE:
				sequence_House(context, (House) semanticObject); 
				return; 
			case HousebuilderV2Package.PASSAGE:
				sequence_Passage(context, (Passage) semanticObject); 
				return; 
			case HousebuilderV2Package.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case HousebuilderV2Package.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case HousebuilderV2Package.WINDOW:
				sequence_Window(context, (Window) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (name=EString type=ActuatorType model=EString? device=[Device|EString])
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Controller returns Controller
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         model=EString 
	 *         os=EString? 
	 *         osVersion=EString? 
	 *         actuators+=Actuator 
	 *         actuators+=Actuator* 
	 *         sensors+=Sensor 
	 *         sensors+=Sensor*
	 *     )
	 */
	protected void sequence_Controller(ISerializationContext context, Controller semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Device returns Device
	 *
	 * Constraint:
	 *     (name=EString type=DeviceType? model=EString? actuator=[Actuator|EString]?)
	 */
	protected void sequence_Device(ISerializationContext context, Device semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entrance returns Entrance
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         doorType=DoorType 
	 *         doorsNumber=EInt 
	 *         width=EFloat 
	 *         height=EFloat 
	 *         space=[Space|EString] 
	 *         (devices+=Device devices+=Device*)?
	 *     )
	 */
	protected void sequence_Entrance(ISerializationContext context, Entrance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Space returns ExternalSpace
	 *     ExternalSpace returns ExternalSpace
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         length=EFloat 
	 *         width=EFloat 
	 *         type=OuterSpaceType? 
	 *         ground=GroundType? 
	 *         (sensors+=[Sensor|EString] sensors+=[Sensor|EString]*)? 
	 *         (entrances+=[Entrance|EString] entrances+=[Entrance|EString]*)? 
	 *         (devices+=Device devices+=Device*)?
	 *     )
	 */
	protected void sequence_ExternalSpace(ISerializationContext context, ExternalSpace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Floor returns Floor
	 *
	 * Constraint:
	 *     (name=EString level=EInt spaces+=Space spaces+=Space*)
	 */
	protected void sequence_Floor(ISerializationContext context, Floor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     House returns House
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         state=EString? 
	 *         province=EString? 
	 *         city=EString? 
	 *         postalCode=EString? 
	 *         address=EString? 
	 *         buildingDate=EDate? 
	 *         floors+=Floor 
	 *         floors+=Floor* 
	 *         (passages+=Passage passages+=Passage*)? 
	 *         (controllers+=Controller controllers+=Controller*)? 
	 *         entrances+=Entrance 
	 *         entrances+=Entrance*
	 *     )
	 */
	protected void sequence_House(ISerializationContext context, House semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Passage returns Passage
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         doorType=DoorType 
	 *         doorsNumber=EInt 
	 *         width=EFloat 
	 *         height=EFloat 
	 *         spaceA=[Space|EString] 
	 *         spaceB=[Space|EString] 
	 *         (devices+=Device devices+=Device*)?
	 *     )
	 */
	protected void sequence_Passage(ISerializationContext context, Passage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Space returns Room
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         length=EFloat 
	 *         width=EFloat 
	 *         height=EFloat 
	 *         roomType=RoomType? 
	 *         (sensors+=[Sensor|EString] sensors+=[Sensor|EString]*)? 
	 *         (entrances+=[Entrance|EString] entrances+=[Entrance|EString]*)? 
	 *         (devices+=Device devices+=Device*)? 
	 *         (windows+=Window windows+=Window*)?
	 *     )
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=EString type=SensorType value=EFloat model=EString? space=[Space|EString])
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Window returns Window
	 *
	 * Constraint:
	 *     (name=EString doorsNumber=EInt width=EFloat height=EFloat)
	 */
	protected void sequence_Window(ISerializationContext context, Window semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HousebuilderV2Package.Literals.NAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HousebuilderV2Package.Literals.NAMED__NAME));
			if (transientValues.isValueTransient(semanticObject, HousebuilderV2Package.Literals.WINDOW__DOORS_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HousebuilderV2Package.Literals.WINDOW__DOORS_NUMBER));
			if (transientValues.isValueTransient(semanticObject, HousebuilderV2Package.Literals.WINDOW__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HousebuilderV2Package.Literals.WINDOW__WIDTH));
			if (transientValues.isValueTransient(semanticObject, HousebuilderV2Package.Literals.WINDOW__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HousebuilderV2Package.Literals.WINDOW__HEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWindowAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWindowAccess().getDoorsNumberEIntParserRuleCall_4_0(), semanticObject.getDoorsNumber());
		feeder.accept(grammarAccess.getWindowAccess().getWidthEFloatParserRuleCall_6_0(), semanticObject.getWidth());
		feeder.accept(grammarAccess.getWindowAccess().getHeightEFloatParserRuleCall_8_0(), semanticObject.getHeight());
		feeder.finish();
	}
	
	
}
